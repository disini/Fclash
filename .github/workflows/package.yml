name: Build Desktop Packages

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - stable
    paths-ignore:
      - README.md
      - snap/**
      - .github/**
      - docs/**
      - PKGBUILD
      - .SRCINFO
      - LICENSE

env:
  VERSION: 1.4.2
  FLUTTER_BASE_VERSION: 3.10.6
  FLUTTER_ELINUX_GIT_COMMIT_ID: 744ba63a0b9d5371894ba4affa6a549e6a427d96

jobs:

  build-windows-package:
    runs-on: windows-2019

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.21.0'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '${{ env.FLUTTER_BASE_VERSION }}'
          channel: 'stable'
          cache: true
      - name: Build clash lib
        shell: bash
        env:
          CGO_ENABLED: 1
        run: |
          pushd clash
          go build -buildmode=c-shared -o ./libclash.dll
      - name: Build Flutter
        run: |
          flutter build windows --release
      - name: Package Fclash
        run: |
          iscc .\setup.iss
      - name: Rename Fclash
        shell: bash
        run: |
          pushd ./Output
          mv fclash-x86_64.exe fclash-${{ env.VERSION }}-x86_64.exe

      - uses: actions/upload-artifact@v3
        with:
          name: fclash-${{ env.VERSION }}-x86_64.exe
          path: ./Output/fclash-${{ env.VERSION }}-x86_64.exe
      - uses: ncipollo/release-action@v1
        # if: startsWith(github.ref, 'refs/tags/v')
        with:
          tag: v${{ env.VERSION }}
          allowUpdates: true
          artifacts: Output/fclash-${{ env.VERSION }}-x86_64.exe
          token: ${{ secrets.GITHUB_TOKEN }}

  build-macos-package:
    runs-on: macos-11

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.21.0'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '${{ env.FLUTTER_BASE_VERSION }}'
          channel: 'stable'
          cache: true
      - name: Build macos dmg
        run: |
          brew install create-dmg tree
      - name: Build clash lib
        shell: bash
        env:
          # backport to macos 10.11
          CGO_CFLAGS: "-mmacosx-version-min=10.11"
          CGO_LDFLAGS: "-mmacosx-version-min=10.11"
        run: |
          pushd clash
          go build -buildmode=c-shared -o ./libclash.dylib
      - name: Build Flutter
        run: |
          flutter build macos --release

      - name: Package dmg
        run: |
          tree ./build/macos/Build
          create-dmg  --app-drop-link 600 185 "fclash-${{ env.VERSION}}.dmg" ./build/macos/Build/Products/Release/fclash.app

      - uses: actions/upload-artifact@v3
        with:
          name: fclash-${{ env.VERSION}}.dmg
          path: fclash-${{ env.VERSION}}.dmg
      - uses: ncipollo/release-action@v1
        # if: startsWith(github.ref, 'refs/tags/v')
        with:
          tag: v${{ env.VERSION }}
          allowUpdates: true
          artifacts: "fclash-${{ env.VERSION}}.dmg"
          token: ${{ secrets.GITHUB_TOKEN }}


  build-linux-amd64-deb-package:
    runs-on: ubuntu-20.04

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
      # - name: Install deps
      #   run: |
      #     apt update
      #     apt install -y locate
      # - name: Install AppImageTool
      #   run: |
      #     wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
      #     chmod +x appimagetool
      #     mv appimagetool /usr/local/bin/
      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.21.0'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '${{ env.FLUTTER_BASE_VERSION }}'
          channel: 'stable'
          cache: true
      - name: Enable Linux Desktop Support
        run: flutter config --enable-linux-desktop
      - name: install dependencies
        run: sudo apt update -y && sudo apt install -y libayatana-appindicator3-dev ninja-build build-essential
      - name: build linux debian package
        run: ./build-deb.sh
      - uses: actions/upload-artifact@v3
        with:
          name: cn.kingtous.fclash.deb
          path: ./debian/cn.kingtous.fclash.deb

      - name: Rename deb package
        run: |
          mv ./debian/cn.kingtous.fclash.deb ./debian/cn.kingtous.fclash-${{ env.VERSION }}-x86_64.deb
      - uses: actions/upload-artifact@v3
        with:
          name: cn.kingtous.fclash-${{ env.VERSION }}-x86_64.deb
          path: ./debian/cn.kingtous.fclash-${{ env.VERSION }}-x86_64.deb
      - uses: ncipollo/release-action@v1
        # if: startsWith(github.ref, 'refs/tags/v')
        with:
          tag: v${{ env.VERSION }}
          allowUpdates: true
          artifacts: "./debian/cn.kingtous.fclash-${{ env.VERSION }}-x86_64.deb"
          token: ${{ secrets.GITHUB_TOKEN }}

  build-linux-amd64-rpm-package:
    runs-on: ubuntu-20.04

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.21.0'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '${{ env.FLUTTER_BASE_VERSION }}'
          channel: 'stable'
          cache: true
      - name: Enable Linux Desktop Support
        run: flutter config --enable-linux-desktop
      - name: install dependencies
        run: sudo apt update -y && sudo apt install -y libayatana-appindicator3-dev ninja-build build-essential rpm libarchive-tools
      - name: build linux rpm package
        shell: bash
        run: | 
          ./build-deb.sh
          FCLASH_SRC=`pwd` rpmbuild -bb ./rpm.spec
      
      - uses: ncipollo/release-action@v1
        # if: startsWith(github.ref, 'refs/tags/v')
        with:
          tag: v${{ env.VERSION }}
          allowUpdates: true
          artifacts: "~/rpmbuild/RPMS/x86_64/FClash-${{ env.VERSION }}-*.rpm"
          token: ${{ secrets.GITHUB_TOKEN }}

  build-android-arm64v8a-package:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.21.0'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '${{ env.FLUTTER_BASE_VERSION }}'
          channel: 'stable'
          cache: true
      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r25b
          add-to-path: true
      - name: Build Golang lib
        shell: bash
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          pushd clash
          env GOOS=android GOARCH=arm64 CC=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang GOARM=7 CGO_ENABLED=1 go build -buildmode=c-shared -o ./libclash.so
          popd
          mkdir -p ./android/app/src/main/jniLibs/arm64-v8a
          ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip clash/libclash.so
          mv clash/libclash.so ./android/app/src/main/jniLibs/arm64-v8a/libclash.so
      - name: Build APK
        run: |
          flutter clean && flutter pub get
          flutter build apk --release --target-platform android-arm64 --split-per-abi
          mv build/app/outputs/flutter-apk/app-arm64-v8a-release.apk fclash-${{ env.VERSION}}-arm64-v8a.apk
      - uses: actions/upload-artifact@v3
        with:
          name: fclash-${{ env.VERSION}}-arm64-v8a.apk
          path: fclash-${{ env.VERSION}}-arm64-v8a.apk
      - uses: ncipollo/release-action@v1
        # if: startsWith(github.ref, 'refs/tags/v')
        with:
          tag: v${{ env.VERSION }}
          allowUpdates: true
          artifacts: fclash-${{ env.VERSION}}-arm64-v8a.apk
          token: ${{ secrets.GITHUB_TOKEN }}

  build-linux-aarch64-deb-package:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Prepare env
        run: |
          sudo apt update -y
          sudo apt-get -qq install -y git

      - name: Download Flutter
        shell: bash
        run: |
          # disable git safe.directory
          git config --global --add safe.directory "*"
          pushd /opt
          # clone repo and reset to flutter ${{ env.FLUTTER_BASE_VERSION }}
          git clone https://github.com/sony/flutter-elinux.git || true
          pushd flutter-elinux
            # reset to flutter ${{ env.FLUTTER_BASE_VERSION }}
            git fetch
            git reset --hard ${{ env.FLUTTER_ELINUX_GIT_COMMIT_ID }} 
          popd

      - uses: Kingtous/run-on-arch-action@amd64-support
        name: Build fclash binary for arm64
        id: arm64
        with:
          arch: aarch64
          distro: ubuntu18.04-rustdesk
          githubToken: ${{ github.token }}
          setup: |
            ls -l "${PWD}"
          dockerRunArgs: |
            --volume "${PWD}:/workspace"
            --volume "/opt/flutter-elinux:/opt/flutter-elinux"
          shell: /bin/bash
          install: |
            apt update -y
            apt-get -qq install -y git cmake g++ gcc build-essential nasm yasm curl unzip xz-utils python3 wget pkg-config ninja-build pkg-config libgtk-3-dev liblzma-dev clang libayatana-appindicator3-dev
          run: |
            # disable git safe.directory
            git config --global --add safe.directory "*"
            pushd /opt
            # download go and compile go lib
            wget https://go.dev/dl/go1.20.5.linux-arm64.tar.gz
            tar zxf go1.20.5.linux-arm64.tar.gz
            export PATH=$PATH:/opt/go/bin:/opt/flutter-elinux/bin
            # Patch arm64
            flutter-elinux doctor -v
            flutter-elinux precache --linux
            # Patch arm64 engine for flutter 3.6.0+
            pushd /tmp
            curl -O https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${{ env.FLUTTER_BASE_VERSION }}-stable.tar.xz
            tar -xvf flutter_linux_${{ env.FLUTTER_BASE_VERSION }}-stable.tar.xz flutter/bin/cache/artifacts/engine/linux-x64/shader_lib
            cp -R flutter/bin/cache/artifacts/engine/linux-x64/shader_lib /opt/flutter-elinux/flutter/bin/cache/artifacts/engine/linux-arm64
            popd
            # Build
            pushd /workspace
            # we use flutter-elinux to build our rustdesk
            sed -i "s/flutter build linux --release/flutter-elinux build linux/g" ./build-deb.sh
            sed -i "s/linux\/x64/linux\/arm64/g" ./build-deb.sh
            python3 build-clash-lib.py
            popd
            flutter-elinux doctor -v
            # patch control
            pushd /workspace
            sed -i "s/Architecture: amd64/Architecture: arm64/g" ./debian/build-src/DEBIAN/control
            sed -i "s/Architecture: amd64/Architecture: arm64/g" ./debian/DEBIAN/control
            ./build-deb.sh

      - name: Rename deb package
        run: |
          mv ./debian/cn.kingtous.fclash.deb ./debian/cn.kingtous.fclash-${{ env.VERSION }}-aarch64.deb

      - uses: actions/upload-artifact@v3
        with:
          name: cn.kingtous.fclash-${{ env.VERSION }}-aarch64.deb
          path: ./debian/cn.kingtous.fclash-${{ env.VERSION }}-aarch64.deb
      - uses: ncipollo/release-action@v1
        # if: startsWith(github.ref, 'refs/tags/v')
        with:
          tag: v${{ env.VERSION }}
          allowUpdates: true
          artifacts: "./debian/cn.kingtous.fclash-${{ env.VERSION }}-aarch64.deb"
          token: ${{ secrets.GITHUB_TOKEN }}
